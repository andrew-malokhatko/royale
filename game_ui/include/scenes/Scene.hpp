#pragma once

#include "Node.hpp"
#include "event.hpp"
#include <memory>
#include "SceneManager.hpp"

namespace ui
{
	class Scene : public Node
	{
	protected:
		std::vector<std::unique_ptr<royale::Event>> mGameEvents{};
		SceneManager& mSceneManager;

	public:
		Scene(Rectangle rectangle, SceneManager& sceneManager)
			:
			mSceneManager(sceneManager),
			Node(rectangle)
		{
		}

		//
		//	Generates events from input and passes them to children
		//	This function should not generally be overriden, but if an 
		//	is requiered, call to this function implementation is probably a good idea
		//
		virtual void handleInput();

		//
		//	Executes when the scene is loaded to the screen
		//
		virtual void onSceneLoad() {};

		// 
		//	Executes when a scene leaves the screen
		//
		virtual void onSceneLeave() {};

		//
		//	Updates the scene with packets
		//
		virtual void processPackets(const std::vector<std::unique_ptr<net::Packet>>& packets) {};

		//
		//	Return royale events generated by the scene
		//
		std::vector<std::unique_ptr<royale::Event>> pollEvents()
		{
			return std::move(mGameEvents);
		}
	};
}